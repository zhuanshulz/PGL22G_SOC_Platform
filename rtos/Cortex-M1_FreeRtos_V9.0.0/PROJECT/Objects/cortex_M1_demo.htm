<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\cortex_M1_demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\cortex_M1_demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Apr 10 19:13:33 2021
<BR><P>
<H3>Maximum Stack Usage =        324 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">UARTOVF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">UARTOVF_Handler</a><BR>
 <LI><a href="#[10]">Interrupt10_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">Interrupt10_Handler</a><BR>
 <LI><a href="#[13]">Interrupt13_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">Interrupt13_Handler</a><BR>
 <LI><a href="#[14]">Interrupt14_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">Interrupt14_Handler</a><BR>
 <LI><a href="#[15]">Interrupt15_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">Interrupt15_Handler</a><BR>
 <LI><a href="#[16]">Interrupt16_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">Interrupt16_Handler</a><BR>
 <LI><a href="#[17]">Interrupt17_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">Interrupt17_Handler</a><BR>
 <LI><a href="#[18]">Interrupt18_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">Interrupt18_Handler</a><BR>
 <LI><a href="#[19]">Interrupt19_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">Interrupt19_Handler</a><BR>
 <LI><a href="#[1a]">Interrupt20_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">Interrupt20_Handler</a><BR>
 <LI><a href="#[1b]">Interrupt21_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">Interrupt21_Handler</a><BR>
 <LI><a href="#[1c]">Interrupt22_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">Interrupt22_Handler</a><BR>
 <LI><a href="#[1d]">Interrupt23_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">Interrupt23_Handler</a><BR>
 <LI><a href="#[1e]">Interrupt24_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">Interrupt24_Handler</a><BR>
 <LI><a href="#[1f]">Interrupt25_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">Interrupt25_Handler</a><BR>
 <LI><a href="#[20]">Interrupt26_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">Interrupt26_Handler</a><BR>
 <LI><a href="#[21]">Interrupt27_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">Interrupt27_Handler</a><BR>
 <LI><a href="#[22]">Interrupt28_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">Interrupt28_Handler</a><BR>
 <LI><a href="#[23]">Interrupt29_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">Interrupt29_Handler</a><BR>
 <LI><a href="#[24]">Interrupt30_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">Interrupt30_Handler</a><BR>
 <LI><a href="#[25]">Interrupt31_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">Interrupt31_Handler</a><BR>
 <LI><a href="#[54]">UART_SendChar</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[54]">UART_SendChar</a><BR>
 <LI><a href="#[82]">put_char</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[82]">put_char</a><BR>
 <LI><a href="#[81]">print_num</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[81]">print_num</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[53]">UART_ReceiveChar</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53]">UART_ReceiveChar</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[e]">CAN_Handler</a> from pango_m1_it.o(i.CAN_Handler) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[11]">DTimer_Handler</a> from pango_m1_it.o(i.DTimer_Handler) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[c]">ENT_Handler</a> from pango_m1_it.o(i.ENT_Handler) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[a]">GPIO0_Handler</a> from main.o(i.GPIO0_Handler) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from pango_m1_it.o(i.HardFault_Handler) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[d]">I2C_Handler</a> from main.o(i.I2C_Handler) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[10]">Interrupt10_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[13]">Interrupt13_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[14]">Interrupt14_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[15]">Interrupt15_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[16]">Interrupt16_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[17]">Interrupt17_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[18]">Interrupt18_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[19]">Interrupt19_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[1a]">Interrupt20_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[1b]">Interrupt21_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[1c]">Interrupt22_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[1d]">Interrupt23_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[1e]">Interrupt24_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[1f]">Interrupt25_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[20]">Interrupt26_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[21]">Interrupt27_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[22]">Interrupt28_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[23]">Interrupt29_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[24]">Interrupt30_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[25]">Interrupt31_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from main.o(i.NMI_Handler) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[f]">RTC_Handler</a> from pango_m1_it.o(i.RTC_Handler) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from port.o(i.SVC_Handler) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_pango_m1.o(i.SystemInit) referenced from startup_pango_m1.o(.text)
 <LI><a href="#[8]">TIMER0_Handler</a> from main.o(i.TIMER0_Handler) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[9]">TIMER1_Handler</a> from pango_m1_it.o(i.TIMER1_Handler) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[12]">TRNG_Handler</a> from pango_m1_it.o(i.TRNG_Handler) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[6]">UART0_Handler</a> from main.o(i.UART0_Handler) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[7]">UART1_Handler</a> from pango_m1_it.o(i.UART1_Handler) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[b]">UARTOVF_Handler</a> from startup_pango_m1.o(.text) referenced from startup_pango_m1.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_pango_m1.o(.text)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[29]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[8e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[8f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2b]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[90]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[91]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[92]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[4a]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4c]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UARTOVF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTOVF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTOVF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Interrupt10_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt10_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>Interrupt13_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt13_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt13_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>Interrupt14_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt14_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt14_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>Interrupt15_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt15_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt15_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>Interrupt16_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt16_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt16_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>Interrupt17_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt17_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt17_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>Interrupt18_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt18_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt18_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Interrupt19_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt19_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt19_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>Interrupt20_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt20_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt20_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>Interrupt21_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt21_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt21_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>Interrupt22_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt22_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt22_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Interrupt23_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt23_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt23_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>Interrupt24_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt24_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt24_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>Interrupt25_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt25_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt25_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>Interrupt26_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt26_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt26_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Interrupt27_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt27_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt27_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Interrupt28_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt28_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt28_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Interrupt29_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt29_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt29_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Interrupt30_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt30_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt30_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Interrupt31_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pango_m1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt31_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt31_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_num
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_dadd</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_flt
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_flt
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_flt
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_flt
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[94]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[95]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[96]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[31]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[98]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>CAN_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pango_m1_it.o(i.CAN_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DTimer_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pango_m1_it.o(i.DTimer_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>Delay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>Delay_s</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pango_sdcard.o(i.Delay_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_s
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_SendCommand
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_Reset
</UL>

<P><STRONG><a name="[c]"></a>ENT_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pango_m1_it.o(i.ENT_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPIO0_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.GPIO0_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GPIO0_Handler &rArr; printk &rArr; print_flt &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntClear
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>GPIO_Init</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, pango_m1_gpio.o(i.GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[3b]"></a>GPIO_IntClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pango_m1_gpio.o(i.GPIO_IntClear))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
</UL>

<P><STRONG><a name="[3d]"></a>GpioInit</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, main.o(i.GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GpioInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pango_m1_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>I2C_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.I2C_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>MMC_SD_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pango_sdcard.o(i.MMC_SD_Init))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[40]"></a>MMC_SD_ReadMultiBlock</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, pango_sdcard.o(i.MMC_SD_ReadMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MMC_SD_ReadMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[43]"></a>MMC_SD_Reset</STRONG> (Thumb, 236 bytes, Stack size 20 bytes, pango_sdcard.o(i.MMC_SD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MMC_SD_Reset &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_SendCommand
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_s
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[41]"></a>MMC_SD_SendCommand</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, pango_sdcard.o(i.MMC_SD_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_s
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_WriteMultiBlock
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_Reset
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_ReadMultiBlock
</UL>

<P><STRONG><a name="[45]"></a>MMC_SD_WriteMultiBlock</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, pango_sdcard.o(i.MMC_SD_WriteMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReady
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pango_m1_it.o(i.RTC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SD_WaitReady</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, pango_sdcard.o(i.SD_WaitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_WaitReady &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_WriteMultiBlock
</UL>

<P><STRONG><a name="[47]"></a>SPIInit0</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(i.SPIInit0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPIInit0
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>SPI_CS_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pango_m1_spi.o(i.SPI_CS_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInit0
</UL>

<P><STRONG><a name="[48]"></a>SPI_Init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, pango_m1_spi.o(i.SPI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInit0
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, system_pango_m1.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(.text)
</UL>
<P><STRONG><a name="[8]"></a>TIMER0_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.TIMER0_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER0_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetIRQStatus
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>TIMER1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pango_m1_it.o(i.TIMER1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIMER_ClearIRQ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pango_m1_timer.o(i.TIMER_ClearIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Handler
</UL>

<P><STRONG><a name="[4d]"></a>TIMER_GetIRQStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pango_m1_timer.o(i.TIMER_GetIRQStatus))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Handler
</UL>

<P><STRONG><a name="[50]"></a>TIMER_Init</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, pango_m1_timer.o(i.TIMER_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>

<P><STRONG><a name="[12]"></a>TRNG_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pango_m1_it.o(i.TRNG_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TimerInit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(i.TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>UART0_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.UART0_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendChar
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveChar
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetRxIRQStatus
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearRxIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UART1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pango_m1_it.o(i.UART1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_pango_m1.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>UART_ClearRxIRQ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pango_m1_uart.o(i.UART_ClearRxIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[51]"></a>UART_GetRxIRQStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pango_m1_uart.o(i.UART_GetRxIRQStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[55]"></a>UART_Init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, pango_m1_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[53]"></a>UART_ReceiveChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pango_m1_uart.o(i.UART_ReceiveChar))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveChar
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveChar
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[54]"></a>UART_SendChar</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pango_m1_uart.o(i.UART_SendChar))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendChar
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[57]"></a>UartInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(i.UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UartInit &rArr; UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[99]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[9a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[9b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[69]"></a>disk_initialize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = disk_initialize &rArr; MMC_SD_Reset &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_Reset
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[86]"></a>disk_ioctl</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[6b]"></a>disk_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = disk_read &rArr; MMC_SD_ReadMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_ReadMultiBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[7f]"></a>disk_status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[64]"></a>disk_write</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_WriteMultiBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[6c]"></a>f_close</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>f_mount</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = f_mount &rArr; mount_volume &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>f_open</STRONG> (Thumb, 436 bytes, Stack size 104 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>f_read</STRONG> (Thumb, 342 bytes, Stack size 72 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>f_sync</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[7c]"></a>f_write</STRONG> (Thumb, 402 bytes, Stack size 72 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = main &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInit0
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[80]"></a>print_dec</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pango_m1_printk.o(i.print_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = print_dec &rArr; print_num &rArr;  print_num (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_num
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_flt
</UL>

<P><STRONG><a name="[83]"></a>print_flt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pango_m1_printk.o(i.print_flt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = print_flt &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
</UL>

<P><STRONG><a name="[84]"></a>print_hex2</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pango_m1_printk.o(i.print_hex2))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = print_hex2 &rArr; print_num &rArr;  print_num (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_num
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
</UL>

<P><STRONG><a name="[81]"></a>print_num</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pango_m1_printk.o(i.print_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + In Cycle
<LI>Call Chain = print_num &rArr;  print_num (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_num
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_num
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex2
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_dec
</UL>

<P><STRONG><a name="[85]"></a>print_str</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pango_m1_printk.o(i.print_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = print_str &rArr; put_char &rArr;  put_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
</UL>

<P><STRONG><a name="[3c]"></a>printk</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, pango_m1_printk.o(i.printk))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = printk &rArr; print_flt &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_str
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex2
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_flt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
</UL>

<P><STRONG><a name="[82]"></a>put_char</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pango_m1_printk.o(i.put_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = put_char &rArr;  put_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendChar
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_str
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_num
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex2
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_flt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_dec
</UL>

<P><STRONG><a name="[89]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[87]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[8b]"></a>vApplicationTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.vApplicationTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[8a]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[2d]"></a>vTaskSwitchContext</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[4b]"></a>xTaskIncrementTick</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[42]"></a>xchg_spi</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, pango_sdcard.o(i.xchg_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_s
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReady
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_WriteMultiBlock
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_SendCommand
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_Reset
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_ReadMultiBlock
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[88]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[3f]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[58]"></a>check_fs</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[63]"></a>clst2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[5c]"></a>create_chain</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[5f]"></a>create_name</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = create_name
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[61]"></a>dir_clear</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ff.o(i.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dir_clear &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[65]"></a>dir_next</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[66]"></a>dir_register</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = dir_register &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[67]"></a>dir_sdi</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[7d]"></a>find_volume</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[73]"></a>follow_path</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[5d]"></a>get_fat</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[70]"></a>get_ldnumber</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[75]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[78]"></a>ld_dword</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[5a]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[5b]"></a>mem_cmp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[68]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[60]"></a>mem_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[71]"></a>mount_volume</STRONG> (Thumb, 548 bytes, Stack size 48 bytes, ff.o(i.mount_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = mount_volume &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[59]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[5e]"></a>put_fat</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[77]"></a>remove_chain</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[76]"></a>st_clust</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[74]"></a>st_dword</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[7a]"></a>st_word</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[7b]"></a>sync_fs</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[62]"></a>sync_window</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sync_window &rArr; disk_write &rArr; MMC_SD_WriteMultiBlock &rArr; MMC_SD_SendCommand &rArr; xchg_spi &rArr; Delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[6e]"></a>validate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[2c]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
